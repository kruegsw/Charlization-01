<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head'); %>
</head>

<body class="container">

<header>
  <%- include('../partials/header'); %>
</header>

<main>
  <div id="player-list">

  </div>
  <div class="jumbotron">
    <h1><%= game.gameName %></h1>
  </div>

  <!-------------------------------------------------->
  <!-- tic-tac-toe from chatgpt for testing-->
  <!-------------------------------------------------->
  
  <row>
    <canvas id="game-board" width="300" height="300"></canvas>
    <button id="leave-or-join-game" onclick=updateLeaveOrJoinGameButton()>Leave Game</button>
    <div id="player-list"></div>
  </row>

  <script>
      const canvas = document.getElementById('game-board');
      const ctx = canvas.getContext('2d');

      const cellSize = 100;
      const boardSize = 3;
      let board = Array.from({ length: boardSize }, () => Array(boardSize).fill(''));
      let players = []
      let currentPlayer
      let gameOver = false;

      canvas.addEventListener('click', (event) => {
          if (gameOver) return;

          const rect = canvas.getBoundingClientRect();
          const x = Math.floor((event.clientX - rect.left) / cellSize);
          const y = Math.floor((event.clientY - rect.top) / cellSize);

          if (isValidMove(x, y)) {
              board[x][y] = currentPlayer;
              //currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
              socket.emit('send-message', message = {type: "move", gameState: board} , room = clientGameID)
              drawBoard();
              checkForWin();
          }
      });

      function clearBoard() {
        board = Array.from({ length: boardSize }, () => Array(boardSize).fill(''));
        socket.emit('send-message', message = {type: "move", gameState: board} , room = clientGameID)
        gameOver = false
        drawBoard();
      }

      function drawBoard() {
          ctx.clearRect(0, 0, canvas.width, canvas.height);

          for (let x = 0; x < boardSize; x++) {
              for (let y = 0; y < boardSize; y++) {
                  const cell = board[x][y];
                  if (cell !== '') {
                      ctx.font = '48px Arial';
                      ctx.fillText(cell, x * cellSize + 30, y * cellSize + 70);
                  }
              }
          }

          drawGrid();
      }

      function drawGrid() {
          ctx.strokeStyle = 'black';
          ctx.lineWidth = 2;

          for (let i = 1; i < boardSize; i++) {
              const pos = i * cellSize;
              ctx.beginPath();
              ctx.moveTo(pos, 0);
              ctx.lineTo(pos, canvas.height);
              ctx.moveTo(0, pos);
              ctx.lineTo(canvas.width, pos);
              ctx.stroke();
          }
      }

      function isValidMove(x, y) {
          return board[x][y] === '';
      }

      function checkForWin() {
          const winningCombinations = [
              [[0, 0], [0, 1], [0, 2]],
              [[1, 0], [1, 1], [1, 2]],
              [[2, 0], [2, 1], [2, 2]],
              [[0, 0], [1, 0], [2, 0]],
              [[0, 1], [1, 1], [2, 1]],
              [[0, 2], [1, 2], [2, 2]],
              [[0, 0], [1, 1], [2, 2]],
              [[0, 2], [1, 1], [2, 0]],
          ];

          for (const combination of winningCombinations) {
              const [a, b, c] = combination;
              if (board[a[0]][a[1]] && board[a[0]][a[1]] === board[b[0]][b[1]] && board[a[0]][a[1]] === board[c[0]][c[1]]) {
                  gameOver = true;
                  alert(`${board[a[0]][a[1]]} wins!`);
                  clearBoard(board)
                  announceToChatLog(`${username} won.`)
                  return;
              }
          }

          const isTie = board.every(row => row.every(cell => cell !== ''));
          if (isTie) {
              gameOver = true;
              alert('It\'s a tie!');
              clearBoard(board)
              announceToChatLog("It was a tie.")
          }
      }

      drawBoard();
  </script>

  <!-------------------------------------------------->
  <!-------------------------------------------------->
  <!-------------------------------------------------->

  <div>
    <div id="chat-log" tabindex="0" style="border: 1px solid; overflow-y: auto; max-height: 50vh;"></div>
    <label for="message-input">Message</label>
    <input type="text" id="message-input">
    <button id="send-button">Send</button>

  </div>
</main>

<footer>
  <%- include('../partials/footer'); %>
</footer>

<!-- socket io library for websocket connection to server back end -->
<script
  src="https://cdn.socket.io/4.6.0/socket.io.min.js"
  integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+"
  crossorigin="anonymous">
</script>

<!-- workaround to pass server side EJS variable to client side JS variable -->
<script>
  var clientSocketURL = '<%- socketURL %>' // test is now a valid js object
  var clientGameID = '<%- game._id %>'
  var username = '<%- username %>'
  //var sslPrivateKey = '<- sslPrivateKey >'
  //console.log(clientSocketURL)

  const socket = io(`${clientSocketURL}`,
    {transports: ['websocket', 'polling'], // Default value: ["polling", "websocket", "webtransport"]
    auth: {
      token: "this is a token"
    },
    //key: sslPrivateKey,
    //secure: true,
  }
  );
  // trasports options must be specified for mobile browser client, see:
  // https://stackoverflow.com/questions/23946683/socket-io-bad-request-with-response-code0-messagetransport-unknown
  console.log(socket)

  socket.on("connect", () => {

    announceToChatLog(`Client ${socket.id} connected to the WebSocket`)
    // console.log(`Client ${socket.id} connected to the WebSocket`) // id randomly assigned to client
    
    socket.emit('join-game', room = clientGameID, game => {
      game.chatLog.forEach( message => {
        addMessageToChatLog(message)
      })
      board = game.gameState
      players = game.players
      console.log(players)
      console.log(players.includes(username))
      console.log(players.length < 2 && !players.includes(username))
      if ( players.length < 2 && !players.includes(username) ) { // if room for player and player is not already in game
        socket.emit('send-message', message = {type: "addPlayer", player: username} , room = clientGameID ) // then add player to game
        currentPlayer = ["X", "O"][players.size] // and update player symbol in local client file
      }
      if ( players[0] == username) { currentPlayer = "X" }
      if ( players[1] == username) { currentPlayer = "O" }
      console.log(currentPlayer)
      updatePlayerList(players)
      drawBoard();
    })
  })

  socket.on('connect_error', error => {
    announceToChatLog(error)
    console.log(error)
  })

  socket.on('receive-message', message => {
    console.log(`received messaged from server: ${message}`)
    if (message.type == "chat") { addMessageToChatLog(message) }
    if (message.type == "move") { board = message.gameState; drawBoard() }
    if (message.type == "addPlayer") { players.push(message.player) }
    if (message.type == "removePlayer") {
      if (players[1] == message.player) { players.pop() } else { players.shift() }
      updatePlayerList(players)
    }
  })

  //socket.on("disconnect", () => {})

  const sendButton = document.getElementById("send-button")
  const messageInput = document.getElementById('message-input')
  const chatLog = document.getElementById('chat-log')

  sendButton.addEventListener('click', () => {
    const message = {type: "chat", author: username, text: messageInput.value}
    socket.emit('send-message', message, room = clientGameID)
    messageInput.value = ""
  })

  messageInput.addEventListener('keypress', function (e) {
    if (e.key === 'Enter') {
      const message = {type: "chat", author: username, text: messageInput.value}
      socket.emit('send-message', message, room = clientGameID)
      messageInput.value = ""
    }
  });

  function addMessageToChatLog(message) {
    let div = document.createElement("div")
    div.innerHTML = `<b>${message.author}:</b>  ${message.text}`
    document.getElementById('chat-log').append(div)
  }

  function announceToChatLog(announcement) {
    let div = document.createElement("div")
    div.innerHTML = announcement
    document.getElementById('chat-log').append(div)
  }

  function updatePlayerList(players) {
    let divOne = document.createElement("div")
    divOne.innerHTML = `${"X"}:  ${players[0]}`
    document.getElementById('player-list').append(divOne)
    let divTwo = document.createElement("div")
    divTwo.innerHTML = `${"O"}:  ${players[1]}`
    document.getElementById('player-list').append(divTwo)
  }

  function updateLeaveOrJoinGameButton(leaveOrJoin) {
    button = document.getElementById('leave-or-join-game')
    if ( players.includes(username)) {
      socket.emit('send-message', message = {type: "removePlayer", player: username} , room = clientGameID )
      button.innerHTML = "Join"
    }
    if ( !players.includes(username)) {
      socket.emit('send-message', message = {type: "addPlayer", player: username} , room = clientGameID )
      button.innerHTML = "Leave"
    }
  }

</script>

</body>

</html>